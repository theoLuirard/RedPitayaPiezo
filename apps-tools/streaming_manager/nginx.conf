        location /streaming_manager/upload {

        client_max_body_size 15g;

        alias /tmp/stream_files;

        dav_access user:rw group:rw all:rw;

        dav_methods PUT DELETE MKCOL COPY MOVE;
        autoindex on;
        autoindex_exact_size off;
        autoindex_localtime on;


        }

	location /stream_manager_delete_files {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua '
		local t = os.execute("rm --recursive  /tmp/stream_files/*")
                ngx.say(t)
            ';
        }




        location /get_streaming_ip {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
            
            default_type application/json;

            content_by_lua '
                local eth = io.popen("ip -4 addr list eth0") 
                local wlan = io.popen("ip -4 addr list wlan0") 
                local eth_content = eth:read("*all") 
                local wlan_content = wlan:read("*all") 
                eth:close() 
                wlan:close() 
                ngx.say(eth_content..";"..wlan_content)
            ';
        }
